package jobs;

import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringTokenizer;
import java.util.Map.Entry;
import java.util.Set;

import org.mapdb.DB;
import org.mapdb.DBMaker;
import org.mapdb.HTreeMap;
import org.mapdb.Serializer;

import data_producer.DataProducer;

public class SetCount implements Job<Object> {
	private DataProducer<String> producer;
	List<Set<String>> sets;
	private String inputPath;
	private String outputPath;

	public SetCount(DataProducer<String> producer, List<Set<String>> sets, String inputPath, String outputPath) {
		this.producer = producer;
		this.sets = sets;
		this.inputPath = inputPath;
		this.outputPath = outputPath;
	}

	public Object execute() {
		try {
			producer.initialize(this.inputPath);
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
		HashMap<String, Integer> map = setKeysToMapKeys(sets);
		/*
		while (producer.hasRemaining()) {
			String text = producer.get(1);
			text = text.replaceAll("\\p{P}", " ");
			StringTokenizer tokenizer = new StringTokenizer(text);
			while (tokenizer.hasMoreTokens()) {
				String token = tokenizer.nextToken();
				Long currentCount = map.get(token);
				Long total = currentCount == null ? 1 : currentCount + 1;
				map.put(token, total);
			}
		}
		producer.close();
		writeResults(outputPath, map);
		*/
		return null;
	}

	private void writeResults(String path, Map<String, Long> results) {
		try (FileWriter writer = new FileWriter(path)) {
			for (Entry<String, Long> entry : results.entrySet()) {
				writer.write(entry.getKey() + "," + entry.getValue() + "\n");
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	private HashMap<String, Integer> setKeysToMapKeys(List<Set<String>> sets) {
		HashMap<String, Integer> map = new HashMap<String, Integer>();
		for (Set<String> set : sets) {
			set.forEach(word -> map.put(word, 0));
		}
		return map;
	}
}


































