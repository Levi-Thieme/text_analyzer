package bigData;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.Reader;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.time.Instant;
import java.util.Map.Entry;
import java.util.StringTokenizer;
import java.util.stream.Stream;

import org.mapdb.DB;
import org.mapdb.DBMaker;
import org.mapdb.HTreeMap;
import org.mapdb.Serializer;

public class Driver {

	public static void main(String[] args) {
		DB db = DBMaker
				.memoryDirectDB()
		        .make();
		HTreeMap<String, Long> map = db
		        .hashMap("map", Serializer.STRING, Serializer.LONG)
		        .expireMaxSize(1000)
		        .createOrOpen();
		
		Long start = Instant.now().toEpochMilli();
		Reader reader;
		BufferedReader bufferedReader;
		try {
			reader = new FileReader("data/chapter6.txt");
			bufferedReader = new BufferedReader(reader, 1000 * 25);
			bufferedReader.lines()
			.parallel().forEach(line -> {
				StringTokenizer tokenizer = new StringTokenizer(line);
				while(tokenizer.hasMoreTokens()) {
					String word = tokenizer.nextToken();
					map.put(word, map.get(word) == null ? 1L : map.get(word) + 1L);
				}
			});
		} catch (FileNotFoundException e1) { e1.printStackTrace(); }
		System.out.println("Runtime: " + (Instant.now().toEpochMilli() - start) / 1000);
		StringBuilder builder = new StringBuilder();
		int max = 25;
		int count = 0;
		for (Entry<String, Long> entry : map.getEntries()) {
			builder.append(entry.toString());
			max++;
			if (count > max) { break; }
		}
		System.out.println(builder.toString());
		db.close();
	}

	
}
