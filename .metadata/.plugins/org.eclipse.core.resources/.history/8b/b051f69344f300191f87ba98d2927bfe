package tests;

import static org.junit.Assert.*;

import org.dizitart.no2.Cursor;
import org.dizitart.no2.Document;
import org.dizitart.no2.Nitrite;
import org.dizitart.no2.NitriteCollection;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.dizitart.no2.filters.*;;
public class NitriteTests {
	private Nitrite db;
	private NitriteCollection coll;

	@Before
	public void setup() {
		this.db = Nitrite.builder()
				.filePath("./test.db")
				.openOrCreate();
		this.coll = db.getCollection("testCollection");

	}
	
	@Test
	public void testWrite() {
		Document doc = new Document();
		doc.put("word", "taco");
		doc.put("count", 1);
		this.coll.insert(doc);
	}
	
	@Test
	public void testRead() {
		Cursor c = coll.find(Filters.eq("word", "taco"));
		System.out.println(c.firstOrDefault().toString());
	}
	
	@Test
	public void testUpdate() {
		for (int i = 0; i < 100000; i++) {
			Cursor c = coll.find(Filters.eq("word", "taco"));
			Document d = c.firstOrDefault();
			if (d != null) {
				int count = (int)d.get("count");
				Document updateDoc = new Document();
				updateDoc.put("count", ++count);
				coll.update(Filters.eq("word", "taco"), updateDoc);
				c = coll.find(Filters.eq("word", "taco"));
			}
		}
		Cursor c = coll.find(Filters.eq("word", "taco"));
		System.out.println(c.firstOrDefault().toString());
	}
	
	@After
	public void close() {
		db.close();
	}

}
